<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="richSQL">

<!-- 매칭 발생시 사용되는 SQL들 -->



	<!-- /myGroup -->
	<select id="getGroupSchedules" parameterType="int" resultType="rich.notify.NotDTO">
		SELECT * FROM db.notify WHERE `gno`=#{gno}
	</select>
	
	<select id="getIconTagByTopic" parameterType="String" resultType="String">
		SELECT `icontag` FROM db.icon WHERE `topic` = #{topic}
	</select>
	
	<select id="getMyGroups" parameterType="String" resultType="hj.member.bean.MatchedDTO">
		SELECT * FROM db.group WHERE `username` = #{username} ORDER BY `created` DESC
	</select>
	
	<select id="getGroupDetail" parameterType="int" resultType="hj.member.bean.MatchedDTO">
		SELECT * FROM db.group WHERE `gno`=#{gno} ORDER BY `range` DESC	
	</select>
	

	<!-- 그룹의 매칭 결과를 보여주는데 사용되는 SQL -->
	<select id="getMatchingResultMap" parameterType="String" resultType="hj.member.bean.MatchedDTO">
		SELECT * FROM db.group WHERE `gno`=#{gno} ORDER BY `range` DESC
	</select>
	
	<!-- 매칭 값들 db.match에서 제거할 때 사용되는 SQL -->
	<delete id="deleteMatched" parameterType="java.util.List">
		DELETE FROM db.match
		<where>
			<foreach collection="list" item="item" separator="OR">
				(`username`=#{item.username} AND `x`=#{item.x} AND `y`=#{item.y} AND `range`=#{item.range} AND `time`=#{item.time} AND `topic`=#{item.topic} AND `career`=#{item.career} AND `people`=#{item.people})
			</foreach>
		</where>
	</delete>
	
	<!-- 가장 큰 그룹 넘버를 가져오는 SQL -->
	<!-- numberOfGno : select `group`.`gno` AS `gno` from `group` group by `group`.`gno` -->
	<select id="getGreatestGno" resultType="int">
		SELECT (COUNT(*)+1) FROM numberOfGno
	</select>
	
	<!-- 매칭 값들 db.group에 삽입할 때 사용되는 SQL -->
	<insert id="createGroup">
		INSERT INTO db.group(`gno`, `username`, `nickname`, `created`, `x`, `y`, `range`, `time`, `topic`) VALUES 
		<foreach collection="list" item="item" index="i" separator=",">
			(#{item.gno}, #{item.username}, #{item.nickname}, NOW(), #{item.x},#{item.y},#{item.range},#{item.time},#{item.topic})
		</foreach>
	</insert>	
	
	<!-- 채팅방 인덱스를 추가하는데 사용되는 SQL -->
	<update id="addChattingRoomIndex">
		UPDATE `db`.`ChattingRoomIndex` SET `chattingRoomIndex`=`chattingRoomIndex`+1 WHERE  `id`=1;
	</update>
	
	<!-- 채팅방 생성에 필요한 인덱스를 가져오는데 사용되는 SQL -->
	<select id="getChattingRoomIndex" resultType="int">
		SELECT chattingRoomIndex FROM db.ChattingRoomIndex WHERE `id`=1
	</select>
	
	<!-- 매칭 값들 db.z{index} 로 채팅방 생성하는데 사용되는 SQL -->
	<!-- ${}는 '' 이 붙지 않는다 -->
	<select id="createChattingRoom" parameterType="String">
		CREATE TABLE IF NOT EXISTS ${talbeName} 
		(`gno` bigint DEFAULT NULL,
		`username` VARCHAR(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
		`nickname` varchar(60) DEFAULT NULL,
		`chat` varchar(600) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
		`chat_date` varchar(60) DEFAULT NULL,
		`created` datetime DEFAULT CURRENT_TIMESTAMP) 
		ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
	</select>
	
	<!-- 생성된 채팅방에 첫 채팅을 삽입하는 SQL -->
	<insert id="setChattingRoomMembers" parameterType="java.util.List">
		INSERT INTO db.${list[0].tableName} (`gno`,`username`,`nickname`, `chat`, `chat_date`) VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.gno}, #{item.username}, #{item.nickname}, #{item.chat}, NOW())
		</foreach>
	</insert>
	
	<!-- 채팅방 목록을 업데이트 하는 SQL -->
	<insert id="registerNewChattingRoom" parameterType="java.util.List">
		INSERT INTO db.chattingRoomList VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.tableName}, #{item.username})
		</foreach>
	</insert>
	
	
<!-- End of 매칭 발생시 사용되는 SQL들 -->




	<!-- To get Schedules -->
	<select id="getGreatestNo" resultType="int">
		SELECT MAX(`no`) FROM db.notify
	</select>
	
	<insert id="createSchedule" parameterType="rich.notify.NotDTO">
		INSERT db.notify(`username`, `gno`, `start`, `end`, `title`, `place`, `content`, `created`)
		VALUES(#{username}, #{gno}, #{start}, #{end}, #{title}, #{place}, #{content}, now())
	</insert>
	
	<select id="getMySchedules" parameterType="String" resultType="rich.notify.NotDTO">
		SELECT * FROM db.notify WHERE `username`=#{username} ORDER BY `created` ASC
	</select>
	
	<update id="updateSchedule" parameterType="rich.notify.NotDTO">
		UPDATE db.notify SET `alert`=#{alert}, `time`=#{time}, `title`=#{title}, `content`=#{content}, `link`=#{link}, `updated`=NOW() WHERE `no`=#{no};
	</update>
	
	<delete id="removeSchedule" parameterType="int">
		DELETE FROM db.notify WHERE `no`=#{no}
	</delete>
	<!-- End of Getting Schedules -->

	<!-- To get Database Server Time -->
	<select id="getDBTime" resultType="java.util.Date">
		SELECT now() FROM dual
	</select>

	<!-- FOR Notification -->
	<select id="getOnTimeList" resultType="rich.notify.NotDTO">
		<!-- 10분간격으로 돌면서 현재시간에서 1분 뺀 시간보다 더 이후 시간의 값을 갖고 있는 알림들을 가져온다. -->
		<!-- <![CDATA[내용]]> 이렇게 작성해도 되고... <는 &lt; >는 &gt; -->
		SELECT * FROM db.notify WHERE (`start` <![CDATA[>]]> DATE_SUB(now(), INTERVAL 1 MINUTE)) AND (`start` <![CDATA[<]]> DATE_ADD(now(), INTERVAL 1 MINUTE))
	</select>
	<!-- End of Notification -->

	<!-- FOR MAP -->
	<select id="getMycareer" parameterType="java.lang.String" resultType="int">
		SELECT `mycareer` FROM membertable WHERE username=#{username}
	</select>
	
	<insert id="insertMatch" parameterType="hj.member.bean.MatchDTO">
		INSERT INTO db.match(`username`, `mycareer`, `x`, `y`, `range`, `time`, `topic`, `career`, `people`, `created`) 
		VALUES(#{username}, #{mycareer}, #{x}, #{y}, #{range}, #{time}, #{topic}, #{career}, #{people}, now())
	</insert>
	
	<select id="getMyListFromMatch" parameterType="String" resultType="hj.member.bean.MatchDTO">
		SELECT * FROM db.match where `username` = #{username} ORDER BY `created` ASC 
	</select>
	
	<!-- 유저가 매칭값을 제거할 때 사용되는 SQL -->
	<delete id="deleteMatch" parameterType="hj.member.bean.MatchDTO">
		DELETE FROM db.match WHERE `mno`=#{mno} 	
	</delete>
	
	<!-- End of FOR MAP -->
	
	<!-- FOR CRAWL -->
	<insert id="crawlInsert" parameterType="java.util.List">
		INSERT INTO db.cboard(`bno`, `title`, `nickname`, `boarddate`) VALUES
		<foreach collection="list" item="item" separator=",">
			 (#{item.bno}, #{item.title}, #{item.nickname}, #{item.boarddate})
		</foreach>
	</insert>
	
	<select id="getEmptyContentBno" resultType="String">
		SELECT `bno` FROM db.cboard WHERE `content` IS NULL;
	</select>
	
	<insert id="insertContents" parameterType="java.util.List">
		UPDATE db.cboard set `content`= case
		<foreach collection="list" item="item" separator="">
			when `bno`=#{item.bno} then #{item.content}
		</foreach>
			end where `bno` in 
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item.bno}
		</foreach>
	</insert>
	
	<select id="getGreatestBno" resultType="java.lang.Integer">
		SELECT MAX(`bno`) FROM db.cboard
	</select>	
	
	<!-- End of FOR CRAWL -->

	<!-- FOR BOARD -->
		<select id="getBoardList" resultType="sj.board.bean.CBoardDTO">
			SELECT * FROM db.cboard order by bno desc limit 20
		</select>
	<!-- END OF BOARD -->
	
	

</mapper>


