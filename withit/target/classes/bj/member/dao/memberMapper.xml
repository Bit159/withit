<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="memberSQL">
	<insert id="join1" parameterType="java.util.Map">
		insert into users(username, password) values(#{username}, #{password});
		insert into authorities values(#{username}, #{auth});
	</insert>
	
	<!-- 로그인  -->
	<select id="getNickname" parameterType="String" resultType="String">
		select nickname from db.membertable where username=#{username}
	</select>
	
	<!-- 비밀번호 찾기에서 비밀번호 변경 -->
	<update id="newPwd" parameterType="java.util.Map">
		update membertable set password=#{password} where username=#{username}
	</update>
	
	<!-- 회원가입 -->
	
	<insert id="join" parameterType="java.util.Map">
		insert into db.membertable(username, nickname, password) values(#{username}, #{nickname}, #{password})
	</insert>
	
	<insert id="addInfo" parameterType="member">
		insert into db.membertable(username, nickname, password) values(#{username}, #{nickname},#{password})
	</insert>
	
	<select id="checkMember" parameterType="String" resultType="member">
		select * from db.membertable where username=#{username}
	</select>
	
	<!-- 관리자 페이지 회원정보 불러오기 -->
	
	<select id="getMember" resultType="member">
		select * from db.membertable
	</select>
  	
  	<!-- ============================ 채         팅 ============================ -->
  	
  	<!-- 채팅 저장 -->
  	
  	<insert id="sendMessage" parameterType="chatting">
  		insert into ${chattingRoom}(username, nickname, chat, chat_date) values(#{username}, #{nickname}, #{chat}, #{chat_date})
  	</insert>
  	
  	<!-- 채팅 가져오기 -->
  	
  	<select id="getChatting" resultType="chatting">
  		select * from ${chattingRoom}
  	</select>
  	
  	<!-- 채팅방 프리뷰 가져오기 -->
  	
  	<select id="getLastChatting" parameterType="String" resultType="chatting">
  		select * from ${chattingRoom} order by chat_date desc limit 1
  	</select>
  	
  	<!-- 전체 채팅방 프리뷰 가져오기 -->
  	
  	<select id="getAllChatting" resultType="chattingRoom">
  		select * from db.chattingRoom order by chat_date desc limit 1
  	</select>
  	
  	<!-- 채팅방 생성 -->
  	
  	<select id="createChat" parameterType="java.util.Map">
  		${create_table}
  	</select>
  	
	<!-- 채팅방 생성시 같은 이름이 있는지 확인 -->
	
	<select id="checkRoomName" parameterType="String" resultType="String">
		select db.chattingRoom from chattingRoomList where chattingRoom=#{chattingRoomName}
	</select>

  	<!-- 채팅방 리스트 뽑아오기 -->
  	
  	<select id="getChattingRoom" parameterType="String" resultType="chattingRoom">
  		select * from db.chattingRoomList where members like concat('%',#{username},'%')
  	</select>
  	
  	<!-- 채팅방에 들어가기 -->
  	
	<insert id="joinChattingRoom" parameterType="java.util.Map">
		insert into db.ChattingRoomList values(#{chattingRoom},#{members})
	</insert>
	
	
	<!-- ============================ 채 팅 ============================ -->
	
	<!-- ============================ 공 지 사 항 ============================ -->
	
	<!-- 게시글 총 개수 -->
  	<select id="getNoticeListCnt" resultType="int">
		SELECT count(*) as listCnt 
		FROM db.notice
		<trim prefix="WHERE" prefixOverrides="AND|OR">

			<if test="keyword != null and keyword != '' ">
	
				<if test="searchType=='title'">
	
					AND TITLE like CONCAT('%', #{keyword}, '%')
	
				</if>
	
				<if test="searchType=='nickname'">
	
					AND nickname like CONCAT('%', #{keyword}, '%')
	
				</if>
	      </if>
		</trim>	
	</select>
	
	<!-- 자유게시판 페이징, 검색 처리한 리스트 -->
	<select id="getNoticeList" parameterType="pagination" resultType="bBoardDTO">
		SELECT * 
		FROM db.notice 
		<trim prefix="WHERE" prefixOverrides="AND|OR">

			<if test="searchType=='title' and keyword != null and keyword != '' ">

				AND title like CONCAT('%', #{keyword}, '%')

			</if>

			<if test="searchType=='nickname' and keyword != null and keyword != '' ">

				AND nickname like CONCAT('%', #{keyword}, '%')

			</if>	

		</trim>
		ORDER BY bno desc
		LIMIT #{startList},#{listSize};
	</select>
	
	<!-- 공지사항 클릭 시 정보 가져오기 -->	
	<select id="getNotice" parameterType="int" resultType="bBoardDTO">
		select * from notice where bno=#{bno}
	</select>
	
	<!-- 공지사항 조회수 증가 -->
	<update id="noticeHitUpdate" parameterType="int">
		update notice set hit=hit+1 where bno=#{bno}
	</update>
	
	<!-- 공지사항 댓글 가져오기 -->
	<select id="getNoticeReplyList" parameterType="int" resultType="bBoardReplyDTO">
		select * from db.noticeReply where bno=#{bno} order by bno desc
	</select>
	
	<!-- 공지사항 댓글 추가 -->
	<insert id="noticeReply" parameterType="java.util.Map">
		insert into db.noticeReply (bno, reply, username, nickname, replydate, updatedate) values(#{bno}, #{reply}, #{username}, #{nickname}, #{now}, #{now});
		update db.notice set replys=replys+1 where bno=#{bno};
	</insert>
	
	<!-- 공지사항 댓글 삭제 -->
	<delete id="noticeReplyDelete" parameterType="java.util.Map">
		delete from db.noticeReply where rno=#{rno};
		update db.notice set replys=replys-1 where bno=#{bno}
	</delete>
	
	<!-- 공지사항 댓글 수정 -->
	<update id="noticeReplyModify" parameterType="java.util.Map">
		update db.noticeReply set reply = #{reply} where rno = #{rno}
	</update>
	
	<!-- 공지사항 삭제 -->
	<delete id="noticeDelete" parameterType="int">
		delete from db.notice where bno=#{bno}
	</delete>
	
	<!-- 공지사항 글 작성 -->
	<insert id="noticeWrite" parameterType="java.util.Map">
		INSERT 
		INTO db.notice (title, content, username, nickname, boarddate, updatedate) 
		values(#{title}, #{content}, #{username}, #{nickname}, #{now}, #{now})
	</insert>
	
	<!-- 공지사항 글 수정 -->
	<update id="noticeModify" parameterType="java.util.Map">
		UPDATE db.notice
		SET title = #{title}, content = #{content}, updatedate = #{now}
		WHERE bno = #{bno}
	</update>
	
</mapper>
 